// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: role_permission.sql

package database

import (
	"context"
)

type CreateRolePermissionParams struct {
	Roleid       int32
	Permissinoid int32
}

const deleteRolePermission = `-- name: DeleteRolePermission :many


DELETE FROM RolePermission
WHERE  RoleId = $1
RETURNING rolepermissionid, roleid, permissinoid
`

// update operation use the functionality of
// 1.delete and then only then
// 2.create
// this way avoid the need to loop
func (q *Queries) DeleteRolePermission(ctx context.Context, roleid int32) ([]Rolepermission, error) {
	rows, err := q.db.Query(ctx, deleteRolePermission, roleid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rolepermission
	for rows.Next() {
		var i Rolepermission
		if err := rows.Scan(&i.Rolepermissionid, &i.Roleid, &i.Permissinoid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchRolePermissionByPermissionId = `-- name: FetchRolePermissionByPermissionId :many
SELECT rolepermissionid, roleid, permissinoid FROM RolePermission
WHERE PermissinoId = $1
`

func (q *Queries) FetchRolePermissionByPermissionId(ctx context.Context, permissinoid int32) ([]Rolepermission, error) {
	rows, err := q.db.Query(ctx, fetchRolePermissionByPermissionId, permissinoid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rolepermission
	for rows.Next() {
		var i Rolepermission
		if err := rows.Scan(&i.Rolepermissionid, &i.Roleid, &i.Permissinoid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchRolePermissionByRoleId = `-- name: FetchRolePermissionByRoleId :many
SELECT rolepermissionid, roleid, permissinoid FROM RolePermission
WHERE RoleId = $1
`

func (q *Queries) FetchRolePermissionByRoleId(ctx context.Context, roleid int32) ([]Rolepermission, error) {
	rows, err := q.db.Query(ctx, fetchRolePermissionByRoleId, roleid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rolepermission
	for rows.Next() {
		var i Rolepermission
		if err := rows.Scan(&i.Rolepermissionid, &i.Roleid, &i.Permissinoid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchRolePermissions = `-- name: FetchRolePermissions :many
SELECT rolepermissionid, roleid, permissinoid FROM RolePermission
ORDER BY RoleId
`

func (q *Queries) FetchRolePermissions(ctx context.Context) ([]Rolepermission, error) {
	rows, err := q.db.Query(ctx, fetchRolePermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rolepermission
	for rows.Next() {
		var i Rolepermission
		if err := rows.Scan(&i.Rolepermissionid, &i.Roleid, &i.Permissinoid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
