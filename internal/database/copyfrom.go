// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: copyfrom.go

package database

import (
	"context"
)

// iteratorForCreateRolePermission implements pgx.CopyFromSource.
type iteratorForCreateRolePermission struct {
	rows                 []CreateRolePermissionParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateRolePermission) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateRolePermission) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Roleid,
		r.rows[0].Permissinoid,
	}, nil
}

func (r iteratorForCreateRolePermission) Err() error {
	return nil
}

func (q *Queries) CreateRolePermission(ctx context.Context, arg []CreateRolePermissionParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"rolepermission"}, []string{"roleid", "permissinoid"}, &iteratorForCreateRolePermission{rows: arg})
}
