// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: student.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO Student (
    StudentId, 
    FirstName, 
    FatherName, 
    GrandFatherName, 
    YearOfRegistration, 
    PhoneNumber, 
    Religion, 
    Sex, 
    Status, 
    CardNumber, 
    Photo, 
    RegisteredBy
) 
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING studentinformationid, studentid, firstname, fathername, grandfathername, yearofregistration, phonenumber, religion, sex, status, cardnumber, photo, registeredby, registereddate
`

type CreateStudentParams struct {
	Studentid          string
	Firstname          string
	Fathername         string
	Grandfathername    string
	Yearofregistration string
	Phonenumber        string
	Religion           string
	Sex                string
	Status             string
	Cardnumber         pgtype.Text
	Photo              pgtype.Text
	Registeredby       string
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRow(ctx, createStudent,
		arg.Studentid,
		arg.Firstname,
		arg.Fathername,
		arg.Grandfathername,
		arg.Yearofregistration,
		arg.Phonenumber,
		arg.Religion,
		arg.Sex,
		arg.Status,
		arg.Cardnumber,
		arg.Photo,
		arg.Registeredby,
	)
	var i Student
	err := row.Scan(
		&i.Studentinformationid,
		&i.Studentid,
		&i.Firstname,
		&i.Fathername,
		&i.Grandfathername,
		&i.Yearofregistration,
		&i.Phonenumber,
		&i.Religion,
		&i.Sex,
		&i.Status,
		&i.Cardnumber,
		&i.Photo,
		&i.Registeredby,
		&i.Registereddate,
	)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :one
DELETE FROM Student
WHERE StudentInformationId = $1
RETURNING studentinformationid, studentid, firstname, fathername, grandfathername, yearofregistration, phonenumber, religion, sex, status, cardnumber, photo, registeredby, registereddate
`

func (q *Queries) DeleteStudent(ctx context.Context, studentinformationid int32) (Student, error) {
	row := q.db.QueryRow(ctx, deleteStudent, studentinformationid)
	var i Student
	err := row.Scan(
		&i.Studentinformationid,
		&i.Studentid,
		&i.Firstname,
		&i.Fathername,
		&i.Grandfathername,
		&i.Yearofregistration,
		&i.Phonenumber,
		&i.Religion,
		&i.Sex,
		&i.Status,
		&i.Cardnumber,
		&i.Photo,
		&i.Registeredby,
		&i.Registereddate,
	)
	return i, err
}

const fetchByStudentId = `-- name: FetchByStudentId :one
SELECT studentinformationid, studentid, firstname, fathername, grandfathername, yearofregistration, phonenumber, religion, sex, status, cardnumber, photo, registeredby, registereddate FROM Student
WHERE StudentId = $1
`

func (q *Queries) FetchByStudentId(ctx context.Context, studentid string) (Student, error) {
	row := q.db.QueryRow(ctx, fetchByStudentId, studentid)
	var i Student
	err := row.Scan(
		&i.Studentinformationid,
		&i.Studentid,
		&i.Firstname,
		&i.Fathername,
		&i.Grandfathername,
		&i.Yearofregistration,
		&i.Phonenumber,
		&i.Religion,
		&i.Sex,
		&i.Status,
		&i.Cardnumber,
		&i.Photo,
		&i.Registeredby,
		&i.Registereddate,
	)
	return i, err
}

const fetchStudents = `-- name: FetchStudents :many
SELECT studentinformationid, studentid, firstname, fathername, grandfathername, yearofregistration, phonenumber, religion, sex, status, cardnumber, photo, registeredby, registereddate FROM Student
ORDER BY StudentInformationId
`

func (q *Queries) FetchStudents(ctx context.Context) ([]Student, error) {
	rows, err := q.db.Query(ctx, fetchStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.Studentinformationid,
			&i.Studentid,
			&i.Firstname,
			&i.Fathername,
			&i.Grandfathername,
			&i.Yearofregistration,
			&i.Phonenumber,
			&i.Religion,
			&i.Sex,
			&i.Status,
			&i.Cardnumber,
			&i.Photo,
			&i.Registeredby,
			&i.Registereddate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudent = `-- name: UpdateStudent :one
UPDATE Student 
SET
    StudentId = $2, 
    FirstName = $3, 
    FatherName = $4, 
    GrandFatherName = $5, 
    YearOfRegistration = $6, 
    PhoneNumber = $7, 
    Religion = $8, 
    Sex = $9, 
    Status = $10, 
    CardNumber = $11,  
    Photo = $12,  
    RegisteredBy = $13
WHERE StudentInformationId = $1
RETURNING studentinformationid, studentid, firstname, fathername, grandfathername, yearofregistration, phonenumber, religion, sex, status, cardnumber, photo, registeredby, registereddate
`

type UpdateStudentParams struct {
	Studentinformationid int32
	Studentid            string
	Firstname            string
	Fathername           string
	Grandfathername      string
	Yearofregistration   string
	Phonenumber          string
	Religion             string
	Sex                  string
	Status               string
	Cardnumber           pgtype.Text
	Photo                pgtype.Text
	Registeredby         string
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) (Student, error) {
	row := q.db.QueryRow(ctx, updateStudent,
		arg.Studentinformationid,
		arg.Studentid,
		arg.Firstname,
		arg.Fathername,
		arg.Grandfathername,
		arg.Yearofregistration,
		arg.Phonenumber,
		arg.Religion,
		arg.Sex,
		arg.Status,
		arg.Cardnumber,
		arg.Photo,
		arg.Registeredby,
	)
	var i Student
	err := row.Scan(
		&i.Studentinformationid,
		&i.Studentid,
		&i.Firstname,
		&i.Fathername,
		&i.Grandfathername,
		&i.Yearofregistration,
		&i.Phonenumber,
		&i.Religion,
		&i.Sex,
		&i.Status,
		&i.Cardnumber,
		&i.Photo,
		&i.Registeredby,
		&i.Registereddate,
	)
	return i, err
}
