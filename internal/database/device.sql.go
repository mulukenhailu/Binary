// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: device.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO Device(
    SerialNumber,
    Port,
    IpAddress,
    Name,
    Campus,
    BlockNumber,
    RegisteredBy
)
VALUES($1, $2, $3, $4, $5, $6, $7)
RETURNING deviceid, serialnumber, port, ipaddress, name, campus, blocknumber, registeredby, registereddate
`

type CreateDeviceParams struct {
	Serialnumber pgtype.Text
	Port         string
	Ipaddress    string
	Name         pgtype.Text
	Campus       pgtype.Text
	Blocknumber  pgtype.Text
	Registeredby string
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice,
		arg.Serialnumber,
		arg.Port,
		arg.Ipaddress,
		arg.Name,
		arg.Campus,
		arg.Blocknumber,
		arg.Registeredby,
	)
	var i Device
	err := row.Scan(
		&i.Deviceid,
		&i.Serialnumber,
		&i.Port,
		&i.Ipaddress,
		&i.Name,
		&i.Campus,
		&i.Blocknumber,
		&i.Registeredby,
		&i.Registereddate,
	)
	return i, err
}

const deleteDevice = `-- name: DeleteDevice :one
DELETE FROM Device
WHERE DeviceId = $1
RETURNING deviceid, serialnumber, port, ipaddress, name, campus, blocknumber, registeredby, registereddate
`

func (q *Queries) DeleteDevice(ctx context.Context, deviceid int32) (Device, error) {
	row := q.db.QueryRow(ctx, deleteDevice, deviceid)
	var i Device
	err := row.Scan(
		&i.Deviceid,
		&i.Serialnumber,
		&i.Port,
		&i.Ipaddress,
		&i.Name,
		&i.Campus,
		&i.Blocknumber,
		&i.Registeredby,
		&i.Registereddate,
	)
	return i, err
}

const fetchByCampus = `-- name: FetchByCampus :many
SELECT deviceid, serialnumber, port, ipaddress, name, campus, blocknumber, registeredby, registereddate FROM Device
WHERE Campus = $1
`

func (q *Queries) FetchByCampus(ctx context.Context, campus pgtype.Text) ([]Device, error) {
	rows, err := q.db.Query(ctx, fetchByCampus, campus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.Deviceid,
			&i.Serialnumber,
			&i.Port,
			&i.Ipaddress,
			&i.Name,
			&i.Campus,
			&i.Blocknumber,
			&i.Registeredby,
			&i.Registereddate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchDevices = `-- name: FetchDevices :many
SELECT deviceid, serialnumber, port, ipaddress, name, campus, blocknumber, registeredby, registereddate FROM Device
`

func (q *Queries) FetchDevices(ctx context.Context) ([]Device, error) {
	rows, err := q.db.Query(ctx, fetchDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.Deviceid,
			&i.Serialnumber,
			&i.Port,
			&i.Ipaddress,
			&i.Name,
			&i.Campus,
			&i.Blocknumber,
			&i.Registeredby,
			&i.Registereddate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDevice = `-- name: UpdateDevice :one
UPDATE Device
SET SerialNumber        = $2,
    Port                = $3,
    IpAddress           = $4,
    Name                = $5,
    Campus              = $6,
    BlockNumber         = $7,
    RegisteredBy        = $8
WHERE DeviceId          = $1
RETURNING deviceid, serialnumber, port, ipaddress, name, campus, blocknumber, registeredby, registereddate
`

type UpdateDeviceParams struct {
	Deviceid     int32
	Serialnumber pgtype.Text
	Port         string
	Ipaddress    string
	Name         pgtype.Text
	Campus       pgtype.Text
	Blocknumber  pgtype.Text
	Registeredby string
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, updateDevice,
		arg.Deviceid,
		arg.Serialnumber,
		arg.Port,
		arg.Ipaddress,
		arg.Name,
		arg.Campus,
		arg.Blocknumber,
		arg.Registeredby,
	)
	var i Device
	err := row.Scan(
		&i.Deviceid,
		&i.Serialnumber,
		&i.Port,
		&i.Ipaddress,
		&i.Name,
		&i.Campus,
		&i.Blocknumber,
		&i.Registeredby,
		&i.Registereddate,
	)
	return i, err
}
