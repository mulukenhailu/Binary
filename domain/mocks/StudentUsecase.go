// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/mulukenhailu/Binary/domain"
	mock "github.com/stretchr/testify/mock"
)

// StudentUsecase is an autogenerated mock type for the StudentUsecase type
type StudentUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, createStudentDto
func (_m *StudentUsecase) Create(c context.Context, createStudentDto *domain.CreateStudentDto) error {
	ret := _m.Called(c, createStudentDto)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateStudentDto) error); ok {
		r0 = rf(c, createStudentDto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: c, studentInformationId
func (_m *StudentUsecase) Delete(c context.Context, studentInformationId int32) error {
	ret := _m.Called(c, studentInformationId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(c, studentInformationId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchByStudentId provides a mock function with given fields: c, studentId
func (_m *StudentUsecase) FetchByStudentId(c context.Context, studentId string) (domain.Student, error) {
	ret := _m.Called(c, studentId)

	if len(ret) == 0 {
		panic("no return value specified for FetchByStudentId")
	}

	var r0 domain.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Student, error)); ok {
		return rf(c, studentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Student); ok {
		r0 = rf(c, studentId)
	} else {
		r0 = ret.Get(0).(domain.Student)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, studentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchStudents provides a mock function with given fields: c
func (_m *StudentUsecase) FetchStudents(c context.Context) ([]domain.Student, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for FetchStudents")
	}

	var r0 []domain.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Student, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Student); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Student)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: c, updateStudentDto
func (_m *StudentUsecase) Update(c context.Context, updateStudentDto *domain.UpdateStudentDto) error {
	ret := _m.Called(c, updateStudentDto)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UpdateStudentDto) error); ok {
		r0 = rf(c, updateStudentDto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStudentUsecase creates a new instance of StudentUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStudentUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *StudentUsecase {
	mock := &StudentUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
