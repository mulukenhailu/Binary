// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/mulukenhailu/Binary/domain"
	mock "github.com/stretchr/testify/mock"
)

// RolePermissionUsecase is an autogenerated mock type for the RolePermissionUsecase type
type RolePermissionUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, createPermission
func (_m *RolePermissionUsecase) Create(c context.Context, createPermission *domain.CreatePermissionDto) error {
	ret := _m.Called(c, createPermission)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreatePermissionDto) error); ok {
		r0 = rf(c, createPermission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: c, roleId
func (_m *RolePermissionUsecase) Delete(c context.Context, roleId int32) error {
	ret := _m.Called(c, roleId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(c, roleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchByPermissionId provides a mock function with given fields: c, permissionId
func (_m *RolePermissionUsecase) FetchByPermissionId(c context.Context, permissionId int32) ([]domain.RolePermission, error) {
	ret := _m.Called(c, permissionId)

	if len(ret) == 0 {
		panic("no return value specified for FetchByPermissionId")
	}

	var r0 []domain.RolePermission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]domain.RolePermission, error)); ok {
		return rf(c, permissionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []domain.RolePermission); ok {
		r0 = rf(c, permissionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.RolePermission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(c, permissionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByRoleId provides a mock function with given fields: c, roleId
func (_m *RolePermissionUsecase) FetchByRoleId(c context.Context, roleId int32) ([]domain.RolePermission, error) {
	ret := _m.Called(c, roleId)

	if len(ret) == 0 {
		panic("no return value specified for FetchByRoleId")
	}

	var r0 []domain.RolePermission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]domain.RolePermission, error)); ok {
		return rf(c, roleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []domain.RolePermission); ok {
		r0 = rf(c, roleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.RolePermission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(c, roleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchRolePermissions provides a mock function with given fields: c
func (_m *RolePermissionUsecase) FetchRolePermissions(c context.Context) ([]domain.RolePermission, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for FetchRolePermissions")
	}

	var r0 []domain.RolePermission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.RolePermission, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.RolePermission); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.RolePermission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: c, updatePermission
func (_m *RolePermissionUsecase) Update(c context.Context, updatePermission *domain.UpdatePermissionDto) error {
	ret := _m.Called(c, updatePermission)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UpdatePermissionDto) error); ok {
		r0 = rf(c, updatePermission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRolePermissionUsecase creates a new instance of RolePermissionUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRolePermissionUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *RolePermissionUsecase {
	mock := &RolePermissionUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
